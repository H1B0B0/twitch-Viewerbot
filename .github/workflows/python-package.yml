name: Build and Release

on:
  push:
    tags:
      - "*"
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: "x64"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          npm install
          npm run build

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          python -m pip install pyinstaller
          python -m pip install -e .

      - name: Create .env file
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> backend/.env
          echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" >> backend/.env
          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> backend/.env
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> backend/.env

      - name: Execute build script
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Build Windows Executable
        run: |
          pyinstaller --noconfirm --onefile --icon "frontend/public/favicon.ico" `
          --add-data "backend:backend" `
          --add-data "frontend/out:static" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\streamlink;streamlink/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\fake_useragent;fake_useragent/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\Crypto;Crypto/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\rich;rich/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\pycryptodome;pycryptodome/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\PyJWT;PyJWT/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\cryptography;cryptography/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\greenlet;greenlet/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\schedule;schedule/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\python-dotenv;python-dotenv/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\requests;requests/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\gevent;gevent/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\flask_jwt_extended;flask_jwt_extended/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\flask_cors;flask_cors/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\flask;flask/" `
          "backend/main.py" `
          --name "TwitchViewerBOT"

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          npm install
          npm run build

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller
          python -m pip install crypto
          pip install .[dev]

      - name: Create .env file
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> backend/.env
          echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" >> backend/.env
          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> backend/.env
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> backend/.env

      - name: Execute build script
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Build MacOS App
        run: |
          pyinstaller --noconfirm --onefile --icon "frontend/public/favicon.ico" \
          --add-data "backend:backend" \
          --add-data "frontend/out:static" \
          --add-data "$PYTHONPATH/site-packages/streamlink:streamlink" \
          --add-data "$PYTHONPATH/site-packages/fake_useragent:fake_useragent" \
          --add-data "$PYTHONPATH/site-packages/Crypto:Crypto" \
          --add-data "$PYTHONPATH/site-packages/rich:rich" \
          --add-data "$PYTHONPATH/site-packages/pycryptodome:pycryptodome" \
          --add-data "$PYTHONPATH/site-packages/PyJWT:PyJWT" \
          --add-data "$PYTHONPATH/site-packages/cryptography:cryptography" \
          --add-data "$PYTHONPATH/site-packages/greenlet:greenlet" \
          --add-data "$PYTHONPATH/site-packages/schedule:schedule" \
          --add-data "$PYTHONPATH/site-packages/python-dotenv:python-dotenv" \
          --add-data "$PYTHONPATH/site-packages/requests:requests" \
          --add-data "$PYTHONPATH/site-packages/gevent:gevent" \
          --add-data "$PYTHONPATH/site-packages/flask_jwt_extended:flask_jwt_extended" \
          --add-data "$PYTHONPATH/site-packages/flask_cors:flask_cors" \
          --add-data "$PYTHONPATH/site-packages/flask:flask" \
          "backend/main.py" \
          --name "TwitchViewerBOT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/TwitchViewerBOT

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            # 🚀 TwitchViewerBOT Release Notes

            ## 🎯 Core Features
            - **Multi-threading System**: Support for up to 1000 simultaneous threads
            - **Proxy Support**: Compatible with HTTP, SOCKS4, SOCKS5
            - **Auto-update**: Automatic system updates
            - **Cross-Platform**: Compatible with Windows, Linux, MacOS

            ## 🆕 New Features
            ### User Interface
            - 🖥️ Modern and responsive React interface
            - 📊 Real-time dashboard with statistics
            - 🌙 Dark/Light mode
            - 📱 Mobile support
            ### Bot Features
            - 🤖 Integrated AI chat system
            - 📈 Advanced analytics
            - 🔄 Automatic proxy rotation
            - ⚡ Optimized performance mode
            - 🎮 Multi-stream support

            ### Security
            - 🔒 JWT Authentication
            - 🛡️ Anti-detection protection
            - 🔑 Secure credentials management
            - 🌐 HTTPS/SSL Support

            ### Premium Features
            - 💬 Custom AI chatbot
            - 📊 Detailed statistics
            - 🔄 Auto-restart capability
            - ⚡ High-performance mode
            - 📈 Automatic scaling

            ## 🛠️ Technical Improvements
            - Optimized Flask backend
            - Asyncio support for better performance
            - Improved memory management
            - Detailed logging
            - Documented RESTful API

            ## 🐛 Bug Fixes
            - Memory leak fixes
            - Connection stability improvements
            - Random disconnection fixes
            - CPU usage optimization

            ## 📚 Documentation
            - Detailed installation guide
            - API documentation
            - Usage examples
            - Troubleshooting guide

            ## 🔗 Links
            - [Documentation](https://docs.velbots.shop)
            - [Discord Support](https://discord.gg/2Sqvx25auv)
            - [Premium Access](https://www.patreon.com/hibo/membership)

            ## 💻 Installation
            1. Download the executable
            2. Launch the application
            3. Login with Discord
            4. Configure your settings
            5. Start the bot

            ## ⚠️ Requirements
            - Windows 10/11 64-bit or MacOS 10.15+
            - 4GB RAM minimum
            - Stable internet connection

            ## 🆘 Support
            For assistance, join our Discord or consult the documentation.

          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-build/TwitchViewerBOT.exe
          asset_name: TwitchViewerBOT-Windows.exe
          asset_content_type: application/octet-stream

      - name: Upload MacOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-build/TwitchViewerBOT
          asset_name: TwitchViewerBOT-MacOS
          asset_content_type: application/octet-stream
