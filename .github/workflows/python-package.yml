name: Build and Release

on:
  push:
    tags:
      - "*"
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: "x64"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          npm install
          npm run build

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller
          python -m pip install crypto
          pip install .[dev]

      - name: Create .env file
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> backend/.env
          echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" >> backend/.env
          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> backend/.env
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> backend/.env

      - name: Execute build script
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Build Windows Executable
        run: |
          pyinstaller --noconfirm --onefile --icon "frontend/public/favicon.ico" `
          --add-data "backend/static;static/" `
          --add-data "backend;backend/" `
          --hidden-import "flask" `
          --hidden-import "flask_cors" `
          --hidden-import "flask_sqlalchemy" `
          --hidden-import "flask_login" `
          --hidden-import "flask_jwt_extended" `
          --hidden-import "werkzeug" `
          --hidden-import "gevent" `
          --hidden-import "requests" `
          --hidden-import "streamlink" `
          --hidden-import "fake_useragent" `
          --hidden-import "websocket" `
          --hidden-import "aiohttp" `
          --hidden-import "asyncio" `
          --hidden-import "sqlite3" `
          --hidden-import "sqlalchemy" `
          --hidden-import "alembic" `
          --hidden-import "cffi" `
          --hidden-import "bcrypt" `
          --hidden-import "jwt" `
          --hidden-import "openai" `
          --hidden-import "numpy" `
          --hidden-import "torch" `
          --hidden-import "transformers" `
          --hidden-import "emoji" `
          --hidden-import "rich" `
          --hidden-import "customtkinter" `
          --hidden-import "python-dotenv" `
          --hidden-import "argparse" `
          --hidden-import "decouple" `
          --hidden-import "certifi" `
          --hidden-import "cryptography" `
          --hidden-import "discord" `
          --hidden-import "selenium" `
          --hidden-import "bs4" `
          --hidden-import "cloudscraper" `
          --hidden-import "schedule" `
          --hidden-import "cachetools" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\customtkinter;customtkinter/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\streamlink;streamlink/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\fake_useragent;fake_useragent/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\Crypto;Crypto/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\cffi;cffi/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\websocket;websocket/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\rich;rich/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\emoji;emoji/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\openai;openai/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\torch;torch/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\transformers;transformers/" `
          --add-data "${env:pythonLocation}\\Lib\\site-packages\\discord;discord/" `
          "backend/main.py" `
          --name "TwitchViewerBOT"

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            # 🚀 TwitchViewerBOT Release Notes

            ## 🎯 Core Features
            - **Multi-threading System**: Support jusqu'à 1000 threads simultanés
            - **Proxy Support**: Compatible avec HTTP, SOCKS4, SOCKS5
            - **Auto-update**: Mise à jour automatique du système
            - **Cross-Platform**: Compatible Windows, Linux, MacOS

            ## 🆕 New Features
            ### Interface Utilisateur
            - 🖥️ Nouvelle interface React moderne et responsive
            - 📊 Dashboard en temps réel avec statistiques
            - 🌙 Mode sombre/clair
            - 📱 Support mobile

            ### Bot Features
            - 🤖 Système de chat AI intégré
            - 📈 Analytics avancés
            - 🔄 Rotation automatique des proxies
            - ⚡ Mode performances optimisées
            - 🎮 Support multi-streams

            ### Security
            - 🔒 Authentification JWT
            - 🛡️ Protection anti-détection
            - 🔑 Gestion sécurisée des credentials
            - 🌐 Support HTTPS/SSL

            ### Premium Features
            - 💬 Chat bot AI personnalisé
            - 📊 Stats détaillées
            - 🔄 Auto-restart
            - ⚡ Mode haute performance
            - 📈 Scaling automatique

            ## 🛠️ Technical Improvements
            - Backend Flask optimisé
            - Support asyncio pour meilleures performances
            - Gestion mémoire améliorée
            - Logs détaillés
            - API RESTful documentée

            ## 🐛 Bug Fixes
            - Correction des fuites mémoire
            - Amélioration stabilité connexions
            - Fix déconnexions aléatoires
            - Optimisation consommation CPU

            ## 📚 Documentation
            - Guide d'installation détaillé
            - Documentation API
            - Exemples d'utilisation
            - Guide de dépannage

            ## 🔗 Links
            - [Documentation](https://docs.velbots.shop)
            - [Discord Support](https://discord.gg/2Sqvx25auv)
            - [Premium Access](https://www.patreon.com/hibo/membership)

            ## 💻 Installation
            1. Téléchargez l'exécutable
            2. Lancez l'application
            3. Connectez-vous avec Discord
            4. Configurez vos paramètres
            5. Démarrez le bot

            ## ⚠️ Requirements
            - Windows 10/11 64-bit
            - 4GB RAM minimum
            - Connexion Internet stable

            ## 🆘 Support
            Pour toute assistance, rejoignez notre Discord ou consultez la documentation.

          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/TwitchViewerBOT.exe
          asset_name: TwitchViewerBOT.exe
          asset_content_type: application/octet-stream
